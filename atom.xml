<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小善缘</title>
  
  <subtitle>有梦为马，随处可栖</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaoshanyuan.github.io/"/>
  <updated>2019-07-21T09:39:06.281Z</updated>
  <id>https://xiaoshanyuan.github.io/</id>
  
  <author>
    <name>小善缘</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个人会有两次生命吗？</title>
    <link href="https://xiaoshanyuan.github.io/2019/07/21/%E4%B8%80%E4%B8%AA%E4%BA%BA%E4%BC%9A%E6%9C%89%E4%B8%A4%E6%AC%A1%E7%94%9F%E5%91%BD%E5%90%97%EF%BC%9F/"/>
    <id>https://xiaoshanyuan.github.io/2019/07/21/一个人会有两次生命吗？/</id>
    <published>2019-07-21T09:19:47.000Z</published>
    <updated>2019-07-21T09:39:06.281Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/blsmy.jpg" alt="巴黎圣母院" title="巴黎圣母院"></p><p>前一阵，巴黎圣母院被烧了，这是一个悲剧。但是你发现没有，关于巴黎圣母院的话题最近是更多了：谁烧的、怎么重建、中国在重建工程中有没有机会……形形色色的话题，大家都在讨论。</p><p>那这场火，对于巴黎圣母院，它到底是坏事还是好事，就真的很难说了。如果你只把它看成是一个建筑，这当然是一件坏事。如果你把它看成是一个文化符号呢？这个符号其实是被大火加强了，反倒是一件好事。</p><p>这就像《蒙娜丽莎》这幅画，正是因为当年发生了盗窃案，它后来才变得如此有名。</p><p>对于这个现象，我的同事怀沙告诉我了一句墨西哥谚语，一个人会死两次，第一次是肉体死亡，而第二次呢，是这个世界上没有人记得他了。</p><p>要是这么说的话，巴黎圣母院的这次火灾，恰恰是强化了它在人类文化中的存在，恰恰是一次延年益寿的机会。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/img/blsmy.jpg&quot; alt=&quot;巴黎圣母院&quot; title=&quot;巴黎圣母院&quot;&gt;&lt;/p&gt;
&lt;p&gt;前一阵，巴黎圣母院被烧了，这是一个悲剧。但是你发现没有，关于巴黎圣母院的话题最近是更多了：谁烧的、怎么重建、中国在重建工程中有没有机会……形形色色的话题，
      
    
    </summary>
    
      <category term="随笔文章" scheme="https://xiaoshanyuan.github.io/categories/%E9%9A%8F%E7%AC%94%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="逻辑思维" scheme="https://xiaoshanyuan.github.io/tags/%E9%80%BB%E8%BE%91%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xiaoshanyuan.github.io/2019/07/20/hello-world/"/>
    <id>https://xiaoshanyuan.github.io/2019/07/20/hello-world/</id>
    <published>2019-07-20T09:21:58.000Z</published>
    <updated>2019-07-21T05:45:32.574Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="随笔文章" scheme="https://xiaoshanyuan.github.io/categories/%E9%9A%8F%E7%AC%94%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="静心" scheme="https://xiaoshanyuan.github.io/tags/%E9%9D%99%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>二叉树，平衡树，红黑树的区别</title>
    <link href="https://xiaoshanyuan.github.io/2019/07/20/%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%8C%E5%B9%B3%E8%A1%A1%E6%A0%91%EF%BC%8C%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://xiaoshanyuan.github.io/2019/07/20/二叉树，平衡树，红黑树的区别/</id>
    <published>2019-07-20T09:21:58.000Z</published>
    <updated>2019-07-21T07:51:08.819Z</updated>
    
    <content type="html"><![CDATA[<p>红黑树算是很难的一种数据结构吧，一般很少考察插入、删除等具体操作步骤，如果遇到要你手写红黑树的面试官，就直接告辞吧。所以，更多是会考察你对红黑树的理解程度，考察的最多的估计就是为什么有了二查找查找树/平衡树还需要红黑树这个问题了，今天，你只需要花一分钟的时间，就知道怎么回答这个问题了。</p><hr><h4 id="1-二叉查找树的缺点"><a href="#1-二叉查找树的缺点" class="headerlink" title="1. 二叉查找树的缺点"></a>1. 二叉查找树的缺点</h4><p>二叉查找树，相信大家都接触过，二叉查找树的特点就是左子树的节点值比父亲节点小，而右子树的节点值比父亲节点大，如图<br><img src="/img/erchashu-1.jpg" alt="二叉树-1"></p><p>基于二叉查找树的这种特点，我们在查找某个节点的时候，可以采取类似于二分查找的思想，快速找到某个节点。n 个节点的二叉查找树，正常的情况下，查找的时间复杂度为 O（logn）。</p><p>之所以说是正常情况下，是因为二叉查找树有可能出现一种极端的情况，例如<br><img src="/img/erchashu-2.jpg" alt="二叉树-2"></p><p>这种情况也是满足二叉查找树的条件，然而，此时的二叉查找树已经近似退化为一条链表，这样的二叉查找树的查找时间复杂度顿时变成了 O(n)，可想而知，我们必须不能让这种情况发生，为了解决这个问题，于是我们引申出了平衡二叉树。</p><h4 id="2-平衡二叉树"><a href="#2-平衡二叉树" class="headerlink" title="2. 平衡二叉树"></a>2. 平衡二叉树</h4><p>平衡二叉树就是为了解决二叉查找树退化成一颗链表而诞生了，平衡树具有如下特点</p><ol><li>具有二叉查找树的全部特性。</li><li>每个节点的左子树和右子树的高度差至多等于1。<br>例如：图一就是一颗平衡树了，而图二则不是(节点右边标的是这个节点的高度)</li></ol><p><img src="/img/pinghengshu-1.jpg" alt="平衡二叉树-图1"><br><img src="/img/pinghengshu-2.jpg" alt="平衡二叉树-图2"></p><p>对于图二，因为节点9的左孩子高度为2，而右孩子高度为0。他们之间的差值超过1了。<br>平衡树基于这种特点就可以保证不会出现大量节点偏向于一边的情况了。关于平衡树如何构建、插入、删除、左旋、右旋等操作这里不在说明.</p><p>于是，通过平衡树，我们解决了二叉查找树的缺点。对于有 n 个节点的平衡树，最坏的查找时间复杂度也为 O(logn)。</p><h4 id="3-为什么有了平衡树还需要红黑树？"><a href="#3-为什么有了平衡树还需要红黑树？" class="headerlink" title="3. 为什么有了平衡树还需要红黑树？"></a>3. 为什么有了平衡树还需要红黑树？</h4><p>虽然平衡树解决了二叉查找树退化为近似链表的缺点，能够把查找时间控制在 O(logn)，不过却不是最佳的，因为平衡树要求每个节点的左子树和右子树的高度差至多等于1，这个要求实在是太严了，导致每次进行插入/删除节点的时候，几乎都会破坏平衡树的第二个规则，进而我们都需要通过左旋和右旋来进行调整，使之再次成为一颗符合要求的平衡树。</p><p>显然，如果在那种插入、删除很频繁的场景中，平衡树需要频繁着进行调整，这会使平衡树的性能大打折扣，为了解决这个问题，于是有了红黑树，红黑树具有如下特点：</p><p>1、具有二叉查找树的特点。</p><p>2、根节点是黑色的；</p><p>3、每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存数据。</p><p>4、任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的。</p><p>5、每个节点，从该节点到达其可达的叶子节点是所有路径，都包含相同数目的黑色节点。</p><p>例如下面的图片（注意，图片中黑色的、空的叶子节点没有画出）（图片来自极客时间）<br><img src="/img/hongheishu.jpg" alt="红黑树"></p><p>正是由于红黑树的这种特点，使得它能够在最坏情况下，也能在 O(logn) 的时间复杂度查找到某个节点。至于为什么就能够保证时间复杂度为 O(logn)，我这里就不细讲了，后面的文章可能会讲。</p><p>不过，与平衡树不同的是，红黑树在插入、删除等操作，不会像平衡树那样，频繁着破坏红黑树的规则，所以不需要频繁着调整，这也是我们为什么大多数情况下使用红黑树的原因。</p><p>不过，如果你要说，单单在查找方面的效率的话，平衡树比红黑树快。</p><p>所以，我们也可以说，红黑树是一种不大严格的平衡树。也可以说是一个折中发方案。</p><h4 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h4><p>所以，最后的答案是，平衡树是为了解决二叉查找树退化为链表的情况，而红黑树是为了解决平衡树在插入、删除等操作需要频繁调整的情况。</p><p>不过，红黑树还有挺多其他的知识点可以考，例如红黑树有哪些应用场景？向集合容器中 HashMap，TreeMap 等，内部结构就用到了红黑树了。还有构建一棵节点个数为 n 的红黑树，时间复杂度是多少？红黑树与哈希表在不同应该场景的选择？红黑树有哪些性质？红黑树各种操作的时间复杂度是多少？</p><p>如果你把这些都弄懂了，应该就差不多可以的了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;红黑树算是很难的一种数据结构吧，一般很少考察插入、删除等具体操作步骤，如果遇到要你手写红黑树的面试官，就直接告辞吧。所以，更多是会考察你对红黑树的理解程度，考察的最多的估计就是为什么有了二查找查找树/平衡树还需要红黑树这个问题了，今天，你只需要花一分钟的时间，就知道怎么回答
      
    
    </summary>
    
      <category term="技术博客" scheme="https://xiaoshanyuan.github.io/categories/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="数据结构" scheme="https://xiaoshanyuan.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
